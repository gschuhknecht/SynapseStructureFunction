function[] = MonteCarloSim_SMAQ_Reliability_binning_analysis(statistics_All_Model_MC_simulations,...
    All_Model_MC_simulations,...
    histograms_database_N, histograms_database_P, histograms_database_Q,...
    histograms_database_models,...
    savepath, filename, QuParam_ranges,QuParam_Plotting_ranges,quantal_parameters,n_runs, saving)
%% this script analyses the data generated by the MonteCarloSim_QuantApproxReliabiilty_Main script
% Answers the question: 'When SMAQ predicts a certain result, what other models could have produced the same result?
% This is done for ranges of N, P, Q solutions of SMAQ, that need to be defined in main script.
% Then, the interdependencies of N, P, Q of the underlying models on the accuracy of SMAQ are tested.
% With the results bins, not entire range of possible solutions is covered, e.g. N < 0.5 are discarded, 
% therefore, it is calculated what percentage of the simulated histograms are represented in the solutions.
% This is a valid approach, because:
% - whenever N < 0.5, we count this as 'SMAQ failure' and not as N = 1
% - the question is: when SMAQ said N = 1, what was the true N? So all other SMAQ solutions are neglected in this case.

%% make new directory to save results in
if saving == 1 
    mkdir([savepath,'MonteCarloSim_SMAQ_Reliability_RESULTS']);
    savename = [savepath,'MonteCarloSim_SMAQ_Reliability_RESULTS/'];
end

%%  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

%% Extract all necessary parameters          -> checked

% what solution did SMAQ find for the experimental histogram?
quantal_parameters = table2array(quantal_parameters);
N = round(quantal_parameters(1));     % round them to the digit that is simulated
P = round(quantal_parameters(2),1);      
Q = round(quantal_parameters(3),1);     

% what ranges of N, P, Q were simulated by MonteCarlo, load from main script
N_range = QuParam_ranges{1};
P_range = QuParam_ranges{2};
Q_range = QuParam_ranges{3};
 
n_models_tested = size(All_Model_MC_simulations,3); % how many models were tested

% what ranges of tested models should be plotted, load from main script
N_plotting_range = QuParam_Plotting_ranges{1};     % which range of N would you like to plot?
P_plotting_range = QuParam_Plotting_ranges{2};     % which range of P would you like to plot?
Q_plotting_range = QuParam_Plotting_ranges{3};     % which range of Q would you like to plot?

% make an index, so the column number corresponds to the vale of P and Q (which have decimals: e.g. P: 0.1 - 0.9, written in columns 1-9)
P_plotting_range_index = round(P_plotting_range*10);   % adjust so they resemble the columns, where respective data are
Q_plotting_range_index = round(Q_plotting_range*10);

%%  -------------------------------------------------------------------------------------------------------------------------------------------------------------------

%% Extracting N
% this matrix counts how often each SMAQ predicted a certain result (h/row) at the (i/ column) position of the true N of the underlying model
distribution_of_N_in_underlying_model = zeros(size(N_plotting_range,2),size(N_range,2));

for h = N_plotting_range    % what was the result of SMAQ?    
    for i = 1 : n_models_tested % runs through all the 2700 experiments       
        if histograms_database_N(i,h) ~= 0 % if there is an entry/ if SMAQ gave N = h as a results...       
            distribution_of_N_in_underlying_model(h,histograms_database_models(i,1)) = ...
                distribution_of_N_in_underlying_model(h,histograms_database_models(i,1)) + histograms_database_N(i,h);    
            % ... you count how often QA gave this result, and write that
            % value into the column that represents the true N of the
            % underlying model
                % hist_database_N: h (columns): what was the result of SMAQ for h-th bin?
                % distrib_N_underlying models: rows: what was the results of N from SMAQ? -> h
                % distrib_N_underlying models: columns: what was the true N? -> looked up from hist_database_models               
        end      
    end
end

% plotting N
f = figure('Name',['N'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
for h = N_plotting_range 
    % for each N that was the solution of SMAQ, we plot what the actual N of the underlying models were, that gave that result:
    subplot(8,2,h);
    set(0,'DefaultAxesFontSize',16);
    set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
    hold on;

    % c is the sum of entries in a row (how many solutions in QA has)
    % it's defined to normalize the values to 1
    c = sum(distribution_of_N_in_underlying_model(h,:));
    line([0 20],[0.05 0.05],'Color',[0.1 0.1 0.1],'LineWidth',2,'LineStyle','--');  % 5% level
    e = bar(distribution_of_N_in_underlying_model(h,:) / c); % normalization
    
    e.LineWidth = 2; 
    e.EdgeColor = [0.1 0.1 0.1];
    e.FaceColor = [0.4 0.4 0.4];
    e.FaceAlpha = 0.5;
    title(['SMAQ solution: N = ' num2str(h)]);
    text(7,0.6,['n = ' num2str(c) ' runs'],'FontSize',12);
    ylim([0 0.7]);
end

if saving
    print([savename, filename, '_N'], '-painters','-depsc');
end

cumdist_N = cumsum(distribution_of_N_in_underlying_model,2) ./ sum(distribution_of_N_in_underlying_model,2);
    % define the 95% CIs for N 
    % which range of Ns produced the SMAQ solution we are looking at (with 95% probability?)
    % cumulative sum / total number of experiments = norm. cumulative distribution

% indexing where the norm. cumulative sum exceeds 2.5 and 97.5%
% the bins, which include these points are included into the CI later -> 'conservative guess'
idxl_N = cumdist_N >= 0.025;  % low / 2.5 
idxh_N = cumdist_N >= 0.975;  % high / 97.5 

% find the first bin, where the thresholds of the CIs are crossed
NminCI = zeros(size(idxl_N,1),1);    NmaxCI =  zeros(size(idxl_N,1),1);
for a = N_plotting_range
    NminCI(a,1) = find(idxl_N(a,:) == 1,1);
    NmaxCI(a,1) = find(idxh_N(a,:) == 1,1);
end

% plotting
f = figure('Name',['cumulative distribution N'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
    for a = N_plotting_range      

    % for each N that was the solution of SMAQ, we plot what the actual N of the underlying models were:
        subplot(8,2,a);
        set(0,'DefaultAxesFontSize',16);
        set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
        hold on;
        s = stairs(N_range,cumdist_N(a,:)); 
        s.LineWidth = 2; 
        s.Color = [0.1 0.1 0.1];

    % plot lines that show the CI visually
        line([NminCI(a,1) NminCI(a,1)],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');
        line([NmaxCI(a,1) NmaxCI(a,1)],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');

    % settings
        title(['SMAQ solution: N = ' num2str(N_plotting_range(a))]);
        ylim([0 1]);  
        xticks(2 : 2 : 20);
    end

if saving
    print([savename, filename, '_cumulative distribution N'], '-painters','-depsc');
end

%% -------------------------------------------------------------------------------------------------------------------------------------------------------------------

%% Extracting P
distribution_of_P_in_underlying_model = zeros(size(P_plotting_range,2),size(P_range,2));

for h = P_plotting_range_index % running through 9 bins from P = 0.1 to P = 0.9
    for i = 1 : n_models_tested % runs through all the experimAll_Model_MC_simulationsents
        if histograms_database_P(i,h) ~= 0 % if there is an entry/ if QA gave N = h as a results...
            distribution_of_P_in_underlying_model(h,round(histograms_database_models(i,2)*10)) = ...
                distribution_of_P_in_underlying_model(h,round(histograms_database_models(i,2)*10)) + histograms_database_P(i,h);    
        end
    end  
end

% plotting P
f = figure('Name',['P'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
for h = P_plotting_range_index
    % for each P that was the solution of SMAQ, we plot what the actual P of the underlying models were:
    subplot(5,2,h);
    set(0,'DefaultAxesFontSize',16);
    set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
    hold on;

    c = sum(distribution_of_P_in_underlying_model(h,:));
    
    line([0 1],[0.05 0.05],'Color',[0.1 0.1 0.1],'LineWidth',2,'LineStyle','--');
    e = bar(P_plotting_range,distribution_of_P_in_underlying_model(h,:) / c); % normalization
    e.LineWidth = 2;  
    e.EdgeColor = [0.1 0.1 0.1];
    e.FaceColor = [0.4 0.4 0.4];
    e.FaceAlpha = 0.5;
    title(['SMAQ solution: P = ' num2str(P_plotting_range(h))]);
    
    text(0.4,0.8,['n = ' num2str(c) ' runs'],'FontSize',12);
    ylim([0 1]);    
    xlim([0 1]);
    xticks(P_range);
end

if saving
    print([savename, filename, '_P'], '-painters','-depsc');
end

% define the 95% CIs for P
cumdist_P = cumsum(distribution_of_P_in_underlying_model,2) ./ sum(distribution_of_P_in_underlying_model,2);

idxl_P = cumdist_P >= 0.025;  % low / 2.5 
idxh_P = cumdist_P >= 0.975;  % high / 97.5 

PminCI = zeros(size(idxl_P,1),1);    PmaxCI =  zeros(size(idxl_P,1),1);

for a = P_plotting_range_index
    PminCI(a,1) = find(idxl_P(a,:) == 1,1);
    PmaxCI(a,1) = find(idxh_P(a,:) == 1,1);
end

% plotting
f = figure('Name',['cumulative distribution P'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
    for a = P_plotting_range_index 
        
        subplot(5,2,a);
        set(0,'DefaultAxesFontSize',16);
        set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
        hold on;

        s = stairs(P_range,cumdist_P(a,:));  
        s.LineWidth = 2; 
        s.Color = [0.1 0.1 0.1];

    % plot lines that show the CI visually
        line([PminCI(a,1)*0.1 PminCI(a,1)*0.1],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');
        line([PmaxCI(a,1)*0.1 PmaxCI(a,1)*0.1],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');    

    % settings
        title(['SMAQ solution: P = ' num2str(P_plotting_range(a))]);
        xlim([0 1]);
        ylim([0 1]); 
        xticks(P_range);
    end

if saving
    print([savename, filename, '_cumulative distribution P'], '-painters','-depsc');
end

%% -------------------------------------------------------------------------------------------------------------------------------------------------------------------

%% Extracting Q
distribution_of_Q_in_underlying_model = zeros(size(Q_plotting_range,2),size(Q_range,2));
for h = Q_plotting_range_index
    for i = 1 : n_models_tested
        if histograms_database_Q(i,h) ~= 0 % if there is an entry/ if QA gave N = h as a results...
            distribution_of_Q_in_underlying_model(h,round(histograms_database_models(i,3)*10)) = ...
                distribution_of_Q_in_underlying_model(h,round(histograms_database_models(i,3)*10)) + histograms_database_Q(i,h);    
        end
    end  
end
    
% Plotting Q
f = figure('Name',['Q'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
for h = Q_plotting_range_index    
    
    subplot(5,2,h);
    set(0,'DefaultAxesFontSize',16);
    set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
    hold on;

    c = sum(distribution_of_Q_in_underlying_model(h,:));
    
    line([0 10],[0.05 0.05],'Color',[0.1 0.1 0.1],'LineWidth',2,'LineStyle','--');
    e = bar([0.1 : 0.1 : 1.5],distribution_of_Q_in_underlying_model(h,1:15) / c); % normalization
    e.LineWidth = 2;  
    e.EdgeColor = [0.1 0.1 0.1];
    e.FaceColor = [0.4 0.4 0.4];
    e.FaceAlpha = 0.5;
    title(['SMAQ solution: Q = ' num2str(Q_plotting_range(h))]);
    
    text(0.6,0.6,['n = ' num2str(c) ' runs'],'FontSize',12);
    ylim([0 0.8]);    
    xlim([0 1.55]);
    xticks([min(Q_range) : 0.2 : max(Q_range)]);
end

if saving
    print([savename, filename, '_Q'], '-painters','-depsc');
end

% define the 95% CIs for Q

cumdist_Q = cumsum(distribution_of_Q_in_underlying_model,2) ./ sum(distribution_of_Q_in_underlying_model,2);

idxl_Q = cumdist_Q >= 0.025;  % low / 2.5 
idxh_Q = cumdist_Q >= 0.975;  % high / 97.5 

QminCI = zeros(size(idxl_Q,1),1);    QmaxCI =  zeros(size(idxl_Q,1),1);

for a = Q_plotting_range_index
    QminCI(a,1) = find(idxl_Q(a,:) == 1,1);
    QmaxCI(a,1) = find(idxh_Q(a,:) == 1,1);
end

f = figure('Name',['cumulative distribution Q'],'color',[1.00, 1.00, 1.00],'Position',[0 0 1000 1000]);
    for a = Q_plotting_range_index

        subplot(5,2,a);
        set(0,'DefaultAxesFontSize',16);
        set(gca, 'LineWidth', 2,'box','off','TickDir','out','FontWeight', 'bold');
        hold on;

        s = stairs(Q_range,cumdist_Q(a,1:15));
        s.LineWidth = 2; 
        s.Color = [0.1 0.1 0.1];

    % plot lines that show the CI visually
        line([QminCI(a,1)*0.1 QminCI(a,1)*0.1],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');
        line([QmaxCI(a,1)*0.1 QmaxCI(a,1)*0.1],[0 1],'Color',[0.0 0.45 0.75],'LineWidth',2,'LineStyle','--');    

    % plot settings 
        title(['SMAQ solution: Q = ' num2str(Q_plotting_range(a))]);
        ylim([0 1]);  
        xlim([0 1.59]);
        xticks([min(Q_range) : 0.2 : max(Q_range)]);
    end

if saving
    print([savename, filename, '_cumulative distribution Q'], '-painters','-depsc');
end

%% -------------------------------------------------------------------------------------------------------------------------------------------------------------------

%% generate a table that saves the confidence intervals that are found for the solution of SMAQ for this experiment
% looking only at the CI of the N,P,Q that SMAQ found as the solution for
% this particular experiment:
ConfidenceIntervals_N = [NminCI(round(N)) round(N) NmaxCI(round(N))];   % look up for N of experiment, what the CI are
ConfidenceIntervals_P = [PminCI(round(P,1) *10)*0.1 round(P,1) PmaxCI(round(P,1)*10)*0.1];
ConfidenceIntervals_Q = [QminCI(round(Q,1)*10)*0.1 round(Q,1) QmaxCI(round(Q,1)*10)*0.1];

% some results of SMAQ are not counted, because they fall outside the bins, calculate here, what fraction that is and save it in excel sheet
fraction_N_recovered = sum(sum(histograms_database_N(:,:))) / (n_runs * n_models_tested);
fraction_P_recovered = sum(sum(histograms_database_P(:,:))) / (n_runs * n_models_tested);
fraction_Q_recovered = sum(sum(histograms_database_Q(:,:))) / (n_runs * n_models_tested);

% saving results in excel
CI_table = [array2table(['N';'P';'Q'],'VariableNames',{'Q_var'}),...
    array2table([N; P; Q],'VariableNames',{ 'SMAQ_Solution'}),...
    array2table([ConfidenceIntervals_N; ConfidenceIntervals_P; ConfidenceIntervals_Q],'VariableNames',{ 'CI_lower_bound','MCsim_solution','CI_upper_bound'}),...
    array2table([fraction_N_recovered; fraction_P_recovered; fraction_Q_recovered],'VariableNames',{ 'fraction_histograms_reovered'})]

if saving == 1 
    writetable(CI_table, [savename, filename, '_MCsim_ConfIntervals_RESULTS.xlsx']);
end

